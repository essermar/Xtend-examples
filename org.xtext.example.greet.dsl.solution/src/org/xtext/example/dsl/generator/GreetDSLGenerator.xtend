/*
 * generated by Xtext
 */
package org.xtext.example.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.xtext.example.dsl.greetDSL.Greeting
import org.xtext.example.dsl.greetDSL.Person

import static extension org.apache.commons.lang.StringEscapeUtils.escapeHtml
/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class GreetDSLGenerator implements IGenerator {


	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val output = '''
		<!DOCTYPE html>
		<html>
		<head>
			<title>Greetings</title>
		</head>
		<body>
			<h1>Persons greeted cordially: </h1>
			<ul>
				«FOR Person person : resource.selectGreetedPersons(true)»
					<li>«person.name.escapeHtml()»</li>
				«ENDFOR»
			</ul>
			<h2>Persons greeted: </h2>
			<ul>
				«FOR Person person : resource.selectGreetedPersons(false)»
					<li>«person.name.escapeHtml()»</li>
				«ENDFOR»
			</ul>
		</body>
		</html>
		'''
		fsa.generateFile('greetings.html', output.toString())
	}

	def private selectGreetedPersons(Resource resource, boolean greetedCordially) {
		resource.allContents.filter(Greeting).filter[it.cordially == greetedCordially].map[it.persons].toList().flatten.
			toSet
	}
}
